---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Delegate to kubeinit_setup_host_name
  block:

    - name: Install latest pip module
      ansible.builtin.pip:
        name: pip
        executable: "{{ hostvars[kubeinit_setup_host_name].pip_executable }}"
        state: latest
        extra_args: --user

    - name: Install latest cryptography module
      ansible.builtin.pip:
        name: cryptography
        executable: "{{ hostvars[kubeinit_setup_host_name].pip_executable }}"
        state: latest
        extra_args: --user

    - name: Install latest ansible module
      ansible.builtin.pip:
        name: ansible
        executable: "{{ hostvars[kubeinit_setup_host_name].pip_executable }}"
        state: latest
        extra_args: --user

    - name: Install latest shyaml and netaddr modules
      ansible.builtin.pip:
        name:
          - shyaml
          - netaddr
          - ipython
        executable: "{{ hostvars[kubeinit_setup_host_name].pip_executable }}"
        state: latest
        extra_args: --user

    - name: Set _git_clone_path fact
      ansible.builtin.set_fact:
        _git_clone_path: "{{ kubeinit_git_clone_path | default('~/kubeinit') }}"

    - name: Clone the kubeinit git repo
      ansible.builtin.git:
        clone: true
        dest: "{{ _git_clone_path }}"
        repo: https://github.com/Kubeinit/kubeinit.git
        version: "{{ kubeinit_git_clone_version | default('main') }}"
      when: hostvars[kubeinit_setup_host_name].git_clone_kubeinit|bool

    - name: Install ansible-galaxy requirements
      community.general.ansible_galaxy_install:
        type: collection
        requirements_file: "{{ _git_clone_path + '/kubeinit/requirements.yml' }}"
        force: true
      register: _result
      until: _result.rc == 0

    - name: Remove any existing kubeinit/kubeinit galaxy collection
      ansible.builtin.file:
        path: ~/.ansible/collections/ansible_collections/kubeinit/kubeinit
        state: absent

    - name: Build the kubeinit/kubeinit galaxy collection
      ansible.builtin.command:
        chdir: "{{ _git_clone_path }}"
        cmd: ansible-galaxy collection build kubeinit --verbose --force --output-path releases/
      register: _result
      changed_when: "_result.rc == 0"

    - name: Load galaxy.yml data
      ansible.builtin.command:
        chdir: "{{ _git_clone_path }}"
        cmd: cat kubeinit/galaxy.yml
      register: _result
      changed_when: "_result.rc == 0"

    - name: Set galaxy.yml facts
      ansible.builtin.set_fact:
        galaxy_facts: "{{ _result.stdout | from_yaml }}"

    - name: Install the kubeinit/kubeinit galaxy collection
      ansible.builtin.command:
        chdir: "{{ _git_clone_path }}"
        cmd: ansible-galaxy collection install --force --force-with-deps releases/kubeinit-kubeinit-{{ galaxy_facts.version }}.tar.gz
      register: _result
      changed_when: "_result.rc == 0"
      failed_when: _result is not defined

    - name: Clean up releases folder after installing the collection
      ansible.builtin.file:
        path: "{{ _git_clone_path + '/releases' }}"
        state: absent

  vars:
    kubeinit_setup_host_name: "{{ inventory_hostname }}"
  environment:
    PATH: "{{ hostvars[kubeinit_setup_host_name].remote_home }}/.local/bin:{{ hostvars[kubeinit_setup_host_name].remote_path }}"
  delegate_to: "{{ kubeinit_setup_host_name }}"
