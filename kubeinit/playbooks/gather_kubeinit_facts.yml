---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Create localhost aliases
  hosts: "{{ 'localhost-facts' if 'localhost-facts' in groups['ungrouped'] else 'localhost' }}"
  become: false
  gather_facts: false
  tasks:
    - name: Add host entries for all localhost aliases not in group_names
      ansible.builtin.add_host:
        name: "{{ item }}"
        type: 'localhost-alias'
      loop: "{{ localhost_aliases | difference(groups['ungrouped']) }}"
      vars:
        localhost_aliases:
          - 'kubeinit-cluster'
          - 'kubeinit-defaults'
          - 'kubeinit-env'
          - 'kubeinit-facts'
          - 'kubeinit-network'
          - 'kubeinit-secrets'
          - 'localhost-facts'

- name: Confirm that the version of ansible we are using is current
  hosts: localhost-facts
  become: false
  gather_facts: false
  tasks:
    - name: Check if Ansible meets version requirements.
      tags: task_gather_facts
      ansible.builtin.assert:
        that: "ansible_version.full is version_compare('{{ kubeinit_ansible_min_version }}', '>=')"
        msg: >
          "You must update Ansible to at least {{ kubeinit_ansible_min_version }} to use KubeInit."
      vars:
        kubeinit_ansible_min_version: 2.9

- name: Stop the deployment if requested
  hosts: kubeinit-facts
  become: false
  gather_facts: false
  tasks:
    - name: Stop the deployment if requested
      ansible.builtin.assert:
        msg: 'Stopping before task-gather-facts'
        that: (kubeinit_stop_before_task | default('')) != 'task-gather-facts'
      tags: omit_from_grapher

- name: Add playbook context facts
  hosts: kubeinit-facts
  become: false
  gather_facts: false
  tasks:
    - name: Add playbook context facts
      ansible.builtin.set_fact:
        container_run: "{{ kubeinit_container_run | default(false) | bool }}"

- name: Gather kubeinit secrets
  hosts: kubeinit-secrets
  become: false
  gather_facts: false
  tasks:
    - name: Gather kubeinit secrets
      ansible.builtin.include_role:
        name: kubeinit.kubeinit.kubeinit_prepare
        tasks_from: gather_kubeinit_secrets.yml
        public: true
      vars:
        _param_secret_names:
          - dockerhub-username
          - dockerhub-password
          - kubeinit-ssh-key
          - openshift-pullsecret

- name: Gather additional facts from ansible-controller for kubeinit
  hosts: localhost-facts
  become: false
  gather_facts: false
  tasks:
    - name: Gather additional facts from ansible-controller for kubeinit
      ansible.builtin.include_role:
        name: kubeinit.kubeinit.kubeinit_libvirt
        tasks_from: gather_host_facts.yml
        public: true

- name: Define kubeinit facts from ansible-controller facts
  hosts: kubeinit-facts
  become: false
  gather_facts: false
  tasks:
    - name: Define kubeinit facts from ansible-controller facts
      ansible.builtin.set_fact:
        local_user: "{{ hostvars['localhost-facts'].ansible_user_id }}"
        local_home: "{{ hostvars['localhost-facts'].ansible_user_dir }}"
        local_ssh_dir: "{{ hostvars['localhost-facts'].ansible_user_dir + '/.ssh' }}"
        ssh_keytype: "{{ hostvars['kubeinit-env'].ssh_keytype }}"

- name: Define remote_user fact
  hosts: kubeinit-facts
  become: false
  gather_facts: false
  tasks:
    - name: Lookup remote_user from command-line
      ansible.builtin.set_fact:
        kubeinit_cli_remote_user: "{{ lookup('kubeinit.kubeinit.cli_args', 'remote_user') }}"

    - name: Check for empty remote user when running from kubeinit container
      ansible.builtin.assert:
        msg:
          - "You must provide the user for the playbook when running from the kubeinit container."
          - "e.g. --user root"
        that: not hostvars['kubeinit-facts'].container_run or kubeinit_cli_remote_user|length > 0

    - name: Define kubeinit remote_user
      ansible.builtin.set_fact:
        remote_user: "{{ kubeinit_cli_remote_user if (kubeinit_cli_remote_user|length > 0) else ansible_user_id }}"

- name: Define kubeinit_spec related facts
  hosts: kubeinit-facts
  become: false
  gather_facts: false
  tasks:
    - name: Prepare cluster topology using kubeinit_spec command-line specification
      ansible.builtin.set_fact:
        kubeinit_spec_parts: "{{ kubeinit_spec.split('-') | default([]) }}"

    - name: Assert we have a minimum number of spec parts
      ansible.builtin.assert:
        msg: "Usage: -e kubeinit_spec=<distro>-<driver>-<controllers>-<computes>-<hypervisors>[-<ignored>]"
        that: kubeinit_spec_parts|length >= 5

    - name: Set facts from spec parts
      ansible.builtin.set_fact:
        kubeinit_spec_distro: "{{ kubeinit_spec_parts[0] }}"
        kubeinit_spec_driver: "{{ kubeinit_spec_parts[1] }}"
        kubeinit_spec_controller_count: "{{ kubeinit_spec_parts[2] }}"
        kubeinit_spec_compute_count: "{{ kubeinit_spec_parts[3] }}"
        kubeinit_spec_hypervisor_count: "{{ kubeinit_spec_parts[4] }}"

    - name: Set fact for the spec distro role
      ansible.builtin.set_fact:
        kubeinit_distro_role: "{{ hostvars['kubeinit-facts'].distro_facts[kubeinit_spec_distro].role }}"
      when: hostvars['kubeinit-facts'].distro_facts[kubeinit_spec_distro] is defined

    - name: Assert spec constraints
      ansible.builtin.assert:
        that:
          - kubeinit_distro_role is defined
          - kubeinit_spec_driver in ['libvirt']
          - kubeinit_spec_controller_count in ['1', '3', '5']
          - kubeinit_spec_compute_count|int >= 0
          - kubeinit_spec_hypervisor_count|int >= 1

- name: Define kubeinit_cluster_spec related facts
  hosts: kubeinit-cluster
  become: false
  gather_facts: false
  tasks:
    - name: Load kubeinit_cluster_spec from yaml into a dictionary
      ansible.builtin.set_fact:
        kubeinit_cluster_map: "{{ kubeinit_cluster_spec | from_yaml }}"
      when: kubeinit_cluster_spec is defined

    - name: Define kubeinit_cluster_name
      ansible.builtin.set_fact:
        cluster_name: "{{ kubeinit_cluster_map['cluster_name'] | default(hostvars['kubeinit-facts'].kubeinit_spec_distro + 'cluster') }}"

    - name: Add kubeinit_cluster_map entries to kubeinit-cluster host
      ansible.builtin.set_fact:
        cluster_domain: "{{ kubeinit_cluster_map['cluster_domain'] | default(omit) }}"
        hypervisor_name_pattern: "{{ kubeinit_cluster_map['hypervisor_name_pattern'] | default(omit) }}"
        controller_name_pattern: "{{ kubeinit_cluster_map['controller_name_pattern'] | default(omit) }}"
        compute_name_pattern: "{{ kubeinit_cluster_map['compute_name_pattern'] | default(omit) }}"
      when: kubeinit_cluster_map is defined

    - name: Add kubeinit_spec facts to cluster facts
      ansible.builtin.set_fact:
        cluster_fqdn: "{{ cluster_name + '.' + cluster_domain }}"
        distro: "{{ hostvars['kubeinit-facts'].kubeinit_spec_distro }}"
        distro_role: "{{ hostvars['kubeinit-facts'].kubeinit_distro_role }}"
        controller_count: "{{ hostvars['kubeinit-facts'].kubeinit_spec_controller_count }}"
        compute_count: "{{ hostvars['kubeinit-facts'].kubeinit_spec_compute_count }}"

- name: Add some cluster facts to kubeinit facts
  hosts: kubeinit-facts
  become: false
  gather_facts: false
  tasks:
    - name: Add cluster_name to kubeinit-facts
      ansible.builtin.set_fact:
        cluster_name: "{{ hostvars['kubeinit-cluster'].cluster_name }}"

    - name: Set more cluster facts from inventory groups and kubeinit_spec
      ansible.builtin.set_fact:
        kubeinit_cluster_distro: "{{ kubeinit_spec_distro }}"
        kubeinit_cluster_distro_role: "{{ kubeinit_distro_role }}"
        kubeinit_cluster_domain: "{{ hostvars['kubeinit-cluster'].cluster_domain }}"
        kubeinit_cluster_fqdn: "{{ hostvars['kubeinit-cluster'].cluster_fqdn }}"

- name: Process post_deployment_services_spec
  hosts: kubeinit-cluster
  become: false
  gather_facts: false
  tasks:
    - name: Load post_deployment_services_spec from yaml into a list
      ansible.builtin.set_fact:
        post_deployment_services_list: "{{ post_deployment_services_spec | from_yaml }}"
      when: post_deployment_services_spec is defined

    - name: Add post_deployment_services_list to kubeinit-cluster host
      ansible.builtin.set_fact:
        post_deployment_services: "{{ post_deployment_services_list }}"
      when: post_deployment_services_list | default([]) | length > 0

- name: Process extra_roles_spec
  hosts: kubeinit-cluster
  become: false
  gather_facts: false
  tasks:
    - name: Load extra_roles_spec from yaml into a list
      ansible.builtin.set_fact:
        extra_roles_list: "{{ extra_roles_spec | from_yaml }}"
      when: extra_roles_spec is defined

    - name: Add extra_roles_list to kubeinit-cluster host
      ansible.builtin.set_fact:
        extra_roles: "{{ extra_roles_list }}"
      when: extra_roles_list | default([]) | length > 0

- name: Setup hypervisor hosts
  hosts: kubeinit-facts
  become: false
  gather_facts: false
  tasks:
    - name: Load hypervisor_hosts_spec from yaml into a list of dictionaries
      ansible.builtin.set_fact:
        hypervisor_hosts_map_list: "{{ hypervisor_hosts_spec | from_yaml }}"
      when: hypervisor_hosts_spec is defined

    - name: Create hypervisor hosts for undefined cluster hypervisors
      ansible.builtin.add_host:
        name: "{{ hypervisor_hosts_map_list[ansible_loop.index0]['host'] | default(hostvars['kubeinit-cluster'].hypervisor_name_pattern | format(ansible_loop.index)) }}"
        group: 'hypervisor_hosts'
        ansible_connection: 'smart'
        ansible_host: "{{ hypervisor_hosts_map_list[ansible_loop.index0]['ansible_host'] | default(omit) }}"
        ansible_user: "{{ hostvars['kubeinit-facts'].remote_user }}"
        ssh_hostname: "{{ hypervisor_hosts_map_list[ansible_loop.index0]['ssh_hostname'] | default(omit) }}"
        ssh_username: "{{ hypervisor_hosts_map_list[ansible_loop.index0]['ssh_username'] | default(omit) }}"
        type: 'hypervisor'
      loop: "{{ range(kubeinit_spec_hypervisor_count|int) | list }}"
      loop_control:
        extended: true

- name: Setup bastion host
  hosts: kubeinit-facts
  become: false
  gather_facts: false
  tasks:
    - name: Parse bastion_host_spec into a dictionary if defined
      ansible.builtin.set_fact:
        bastion_host_map: "{{ bastion_host_spec | from_yaml }}"
      when: bastion_host_spec is defined

    - name: Assert bastion_host_spec does not have both target and ansible_host keys
      ansible.builtin.assert:
        msg: "The bastion_host_spec cannot have both target and ansible_host keys."
        that: bastion_host_map['target'] is not defined or bastion_host_map['ansible_host'] is not defined
      when: bastion_host_map is defined

    - name: Define default bastion target and ansible_host from spec target
      ansible.builtin.set_fact:
        default_bastion_target: "{{ bastion_host_map['target'] }}"
      when: bastion_host_map['target'] | default('') | length > 0

    - name: Define default bastion target and ansible_host from spec ansible_host
      ansible.builtin.set_fact:
        default_bastion_target: "{{ bastion_host_map['host'] | default('bastion') }}"
      when: bastion_host_map['ansible_host'] | default('') | length > 0

    - name: Use the first hypervisor if neither bastion host spec or group defines a target or ansible_host
      ansible.builtin.set_fact:
        kubeinit_bastion_host: "{{ default_bastion_target | default(groups['hypervisor_hosts'] | first) }}"

    - name: Create a host entry for the bastion host when it does not have a target
      ansible.builtin.add_host:
        name: "{{ kubeinit_bastion_host }}"
        group: 'extra_hosts'
        ansible_connection: 'smart'
        ansible_host: "{{ bastion_host_map['ansible_host'] }}"
        ansible_user: "{{ hostvars['kubeinit-facts'].remote_user }}"
        type: bastion
      when: bastion_host_map['ansible_host'] | default('') | length > 0

- name: Setup ovn-central host
  hosts: kubeinit-facts
  become: false
  gather_facts: false
  tasks:
    - name: Parse ovn_central_host_spec into a dictionary if defined
      ansible.builtin.set_fact:
        ovn_central_host_map: "{{ ovn_central_host_spec | from_yaml }}"
      when: ovn_central_host_spec is defined

    - name: Assert ovn_central_host_spec does not have both target and ansible_host keys
      ansible.builtin.assert:
        msg: "The ovn_central_host_spec cannot have both target and ansible_host keys."
        that: ovn_central_host_map['target'] is not defined or ovn_central_host_map['ansible_host'] is not defined
      when: ovn_central_host_map is defined

    - name: Define default ovn-central target and ansible_host from spec target
      ansible.builtin.set_fact:
        default_ovn_central_target: "{{ ovn_central_host_map['target'] }}"
      when: ovn_central_host_map['target'] | default('') | length > 0

    - name: Define default ovn-central target and ansible_host from spec ansible_host
      ansible.builtin.set_fact:
        default_ovn_central_target: "{{ ovn_central_host_map['host'] | default('ovn-central') }}"
      when: ovn_central_host_map['ansible_host'] | default('') | length > 0

    - name: Use the first hypervisor if ovn-central host spec does now define a target
      ansible.builtin.set_fact:
        kubeinit_ovn_central_host: "{{ default_ovn_central_target | default(groups['hypervisor_hosts'] | first) }}"

    - name: Create a host entry for the ovn-central host when it does not have a target
      ansible.builtin.add_host:
        name: "{{ kubeinit_ovn_central_host }}"
        group: 'extra_hosts'
        ansible_connection: 'smart'
        ansible_host: "{{ ovn_central_host_map['ansible_host'] }}"
        ansible_user: "{{ hostvars['kubeinit-facts'].remote_user }}"
        type: 'ovn-central'
      when: ovn_central_host_map['ansible_host'] | default('') | length > 0

- name: Set all_hosts fact
  hosts: kubeinit-facts
  become: false
  gather_facts: false
  tasks:
    - name: Set all_hosts fact
      ansible.builtin.set_fact:
        all_hosts: "{{ groups['hypervisor_hosts'] + (groups['extra_hosts'] | default([])) }}"

- name: Create an ssh keypair to access all hosts
  hosts: localhost-facts
  become: false
  gather_facts: false
  tasks:
    - name: Create local_ssh_dir folder if needed
      ansible.builtin.file:
        path: "{{ hostvars['kubeinit-facts'].local_ssh_dir }}"
        state: directory
        mode: '0700'

    - name: Copy kubeinit-ssh-key secret into local_ssh_dir
      ansible.builtin.copy:
        content: "{{ lookup('unvault', hostvars['kubeinit-secrets'].secrets['kubeinit-ssh-key']) }}"
        dest: "{{ hostvars['kubeinit-facts'].local_ssh_dir + '/id_' + hostvars['kubeinit-facts'].ssh_keytype }}"
        mode: '0600'
      when: hostvars['kubeinit-facts'].container_run|bool

    - name: Set kubeinit_cluster_keypair_path fact
      ansible.builtin.set_fact:
        kubeinit_cluster_keypair_path: "{{ hostvars['kubeinit-facts'].local_ssh_dir + '/' + hostvars['kubeinit-facts'].cluster_name + '_id_' + hostvars['kubeinit-facts'].ssh_keytype }}"

    - name: Generate an OpenSSH keypair for the cluster
      community.crypto.openssh_keypair:
        path: "{{ kubeinit_cluster_keypair_path }}"
        type: "{{ hostvars['kubeinit-facts'].ssh_keytype }}"
        comment: "{{ hostvars['kubeinit-facts'].cluster_name + ' ansible-controller' }}"
        regenerate: 'never'
      register: _result_keypair

    - name: Set authorized_key fact from keypair
      ansible.builtin.set_fact:
        authorized_key: "{{ _result_keypair.public_key + ' ' + _result_keypair.comment }}"

    - name: Clear temp results
      ansible.builtin.set_fact:
        _result_keypair: null

- name: Add cluster authorized_key to root account of all hosts
  hosts: "{{ hostvars['kubeinit-facts'].all_hosts }}"
  become: false
  gather_facts: false
  tasks:
    - name: Add cluster authorized_key to root account of all hosts
      ansible.posix.authorized_key:
        user: root
        key: "{{ hostvars['localhost-facts'].authorized_key }}"
        state: present
      become: true
      become_user: root

- name: Create an ssh config for all hosts
  hosts: localhost-facts
  become: false
  gather_facts: false
  tasks:
    - name: Check if kubeinit ssh config exists
      ansible.builtin.stat:
        path: "{{ hostvars['kubeinit-facts'].local_ssh_dir + '/kubeinit_config' }}"
      register: _result_kubeinit_ssh_config_stat

    - name: Check if ssh config exists
      ansible.builtin.stat:
        path: "{{ hostvars['kubeinit-facts'].local_ssh_dir + '/config' }}"
      register: _result_ssh_config_stat
      when: not _result_kubeinit_ssh_config_stat.stat.exists

    - name: Set kubeinit_cluster_ssh_include_paths
      ansible.builtin.set_fact:
        kubeinit_cluster_ssh_include_paths:
          "{{ [_result_kubeinit_ssh_config_stat.stat.path] if (_result_kubeinit_ssh_config_stat.stat.exists) else [_result_ssh_config_stat.stat.path] if (_result_ssh_config_stat.stat.exists) else [] }}"

    - name: Clear temp results
      ansible.builtin.set_fact:
        _result_ssh_config_stat: null
        _result_kubeinit_ssh_config_stat: null

    - name: Set kubeinit_cluster_ssh_config fact
      ansible.builtin.set_fact:
        kubeinit_cluster_ssh_config: "{{ hostvars['kubeinit-facts'].local_ssh_dir + '/' + hostvars['kubeinit-facts'].cluster_name + '_config' }}"

    - name: Create ssh config file from template
      ansible.builtin.include_role:
        name: kubeinit.kubeinit.kubeinit_prepare
        tasks_from: create_host_ssh_config.yml
        public: true
      vars:
        _param_hosts: "{{ hostvars['kubeinit-facts'].all_hosts }}"
        _param_ssh_keytype: "{{ hostvars['kubeinit-facts'].ssh_keytype }}"
        _param_keypair_path: "{{ kubeinit_cluster_keypair_path }}"
        _param_dest_path: "{{ kubeinit_cluster_ssh_config }}"
        _param_include_paths: "{{ kubeinit_cluster_ssh_include_paths }}"

- name: Redefine remote_user fact
  hosts: kubeinit-facts
  become: false
  gather_facts: false
  tasks:
    - name: Ensure kubeinit remote_user fact is set to root
      ansible.builtin.set_fact:
        remote_user: 'root'

- name: Prepare remote ssh access and gather facts from all hosts
  hosts: "{{ hostvars['kubeinit-facts'].all_hosts }}"
  become: false
  gather_facts: false
  tasks:
    - name: Add ansible_ssh_extra_args to all hosts
      ansible.builtin.set_fact:
        ansible_ssh_extra_args: "{{ '-i ' + hostvars['localhost-facts'].kubeinit_cluster_keypair_path + ' -F ' + hostvars['localhost-facts'].kubeinit_cluster_ssh_config }}"
        ansible_user: "{{ hostvars['kubeinit-facts'].remote_user }}"

    - name: Gather facts from each host in the deployment
      ansible.builtin.include_role:
        name: kubeinit.kubeinit.kubeinit_libvirt
        tasks_from: gather_host_facts.yml
        public: true

- name: Define kubeinit network facts
  hosts: kubeinit-network
  become: false
  gather_facts: false
  tasks:
    - name: Parse kubeinit_network_spec into a dictionary when defined
      ansible.builtin.set_fact:
        kubeinit_network_map: "{{ kubeinit_network_spec | from_yaml }}"
      when: kubeinit_network_spec is defined

    - name: Define kubeinit_network_name
      ansible.builtin.set_fact:
        kubeinit_network_name: "{{ kubeinit_network_map['network_name'] | default(hostvars['kubeinit-defaults'].default_network_name) }}"

    - name: Add kubeinit_network_map entries to kubeint-network host
      ansible.builtin.set_fact:
        network_name: "{{ kubeinit_network_name }}"
        network: "{{ kubeinit_network_map['network'] | default(omit) }}"
        gateway_offset: "{{ kubeinit_network_map['gateway_offset'] | default(omit) }}"
        dhcp_start_offset: "{{ kubeinit_network_map['dhcp_start_offset'] | default(omit) }}"
        dhcp_end_offset: "{{ kubeinit_network_map['dhcp_end_offset'] | default(omit) }}"
      when: kubeinit_network_spec is defined

    - name: Set facts from kubeinit-network host
      ansible.builtin.set_fact:
        kubeinit_cluster_network_name: "{{ kubeinit_network_name }}"
        kubeinit_cluster_network: "{{ _network | ansible.utils.ipv4('net') }}"
        kubeinit_cluster_prefix: "{{ _network | ansible.utils.ipv4('prefix') }}"
        kubeinit_cluster_netmask: "{{ _network | ansible.utils.ipv4('netmask') | ansible.utils.ipv4('address') }}"
        kubeinit_cluster_gateway: "{{ _network | ansible.utils.ipv4(hostvars['kubeinit-network'].gateway_offset|int) | ansible.utils.ipv4('address') }}"
        kubeinit_cluster_next_available: "{{ _network | ansible.utils.ipv4(hostvars['kubeinit-network'].dhcp_start_offset|int) | ansible.utils.ipv4('address') }}"
        kubeinit_cluster_last_available: "{{ _network | ansible.utils.ipv4(hostvars['kubeinit-network'].dhcp_end_offset|int) | ansible.utils.ipv4('address') }}"
      vars:
        _network: "{{ hostvars['kubeinit-network'].network }}"

    - name: Assert additional constraints
      ansible.builtin.assert:
        that:
          - kubeinit_cluster_prefix|int < 30

- name: Add cluster network facts to cluster facts
  hosts: kubeinit-cluster
  become: false
  gather_facts: false
  tasks:
    - name: Add cluster network facts to cluster facts
      ansible.builtin.set_fact:
        network_name: "{{ hostvars['kubeinit-network'].kubeinit_cluster_network_name }}"
        network: "{{ hostvars['kubeinit-network'].kubeinit_cluster_network }}"
        prefix: "{{ hostvars['kubeinit-network'].kubeinit_cluster_prefix }}"
        netmask: "{{ hostvars['kubeinit-network'].kubeinit_cluster_netmask }}"
        gateway: "{{ hostvars['kubeinit-network'].kubeinit_cluster_gateway }}"
        next_available: "{{ hostvars['kubeinit-network'].kubeinit_cluster_next_available }}"
        last_available: "{{ hostvars['kubeinit-network'].kubeinit_cluster_last_available }}"

    - name: Assign controller_nodes addresses
      ansible.builtin.add_host:
        name: "{{ controller_node }}"
        group: 'controller_nodes'
        ansible_connection: 'ssh'
        ansible_host: "{{ next_available | ansible.utils.ipmath(ansible_loop.index0) | ansible.utils.ipv4('address') }}"
        ansible_user: root
        type: 'virtual'
      loop: "{{ range(controller_count|int) | list }}"
      loop_control:
        extended: true
      vars:
        controller_node: "{{ hostvars['kubeinit-cluster'].controller_name_pattern | format(ansible_loop.index) }}"

    - name: Update next available address for allocation
      ansible.builtin.set_fact:
        next_available: "{{ next_available | ansible.utils.ipmath(controller_count|int) }}"

    - name: Assign compute_nodes addresses
      ansible.builtin.add_host:
        name: "{{ compute_node }}"
        group: 'compute_nodes'
        ansible_connection: 'ssh'
        ansible_host: "{{ next_available | ansible.utils.ipmath(ansible_loop.index0) | ansible.utils.ipv4('address') }}"
        ansible_user: root
        type: 'virtual'
      loop: "{{ range(compute_count|int) | list }}"
      loop_control:
        extended: true
      vars:
        compute_node: "{{ hostvars['kubeinit-cluster'].compute_name_pattern | format(ansible_loop.index) }}"

    - name: Set cluster_nodes fact
      ansible.builtin.set_fact:
        cluster_nodes: "{{ groups['controller_nodes'] + (groups['compute_nodes'] | default([])) }}"

    - name: Update next available address for allocation
      ansible.builtin.set_fact:
        next_available: "{{ next_available | ansible.utils.ipmath(compute_count|int) }}"

    - name: Set extra_nodes_map_list fact to defaults
      ansible.builtin.set_fact:
        extra_nodes_map_list: "{{ hostvars['kubeinit-defaults'].default_extra_nodes_map_list }}"

    - name: Add entries from extra_nodes_spec to extra_nodes_map_list when defined
      ansible.builtin.set_fact:
        extra_nodes_map_list: "{{ extra_nodes_map_list + (extra_nodes_spec | from_yaml) }}"
      when: extra_nodes_spec is defined

    - name: Add extra_nodes entries for the current distro only
      ansible.builtin.add_host:
        name: "{{ item['name'] }}"
        group: 'extra_nodes'
        type: 'virtual'
        when_distro: "{{ item['when_distro'] | default(omit) }}"
      loop: "{{ extra_nodes_map_list }}"
      when: (item['when_distro'] is not defined or distro in item['when_distro']) and item['name'] is defined

    - name: Set fact for the number of extra nodes in this cluster
      ansible.builtin.set_fact:
        kubeinit_spec_extra_count: "{{ groups['extra_nodes'] | default([]) | length | int }}"

- name: Add cluster network facts to cluster facts
  hosts: kubeinit-cluster
  become: false
  gather_facts: false
  tasks:
    - name: Assign extra_nodes addresses
      ansible.builtin.set_fact:
        ansible_connection: 'ssh'
        ansible_host: "{{ next_available | ansible.utils.ipmath(ansible_loop.index0) | ansible.utils.ipv4('address') }}"
        ansible_user: root
        type: 'virtual'
      loop: "{{ groups['extra_nodes'] | default([]) }}"
      loop_control:
        loop_var: extra_node
        extended: true
      delegate_to: "{{ extra_node }}"
      delegate_facts: true

- name: Add cluster network facts to cluster facts
  hosts: kubeinit-cluster
  become: false
  gather_facts: false
  tasks:
    - name: Update next available address for allocation
      ansible.builtin.set_fact:
        next_available: "{{ next_available | ansible.utils.ipmath(kubeinit_spec_extra_count|int) }}"
      when: kubeinit_spec_extra_count|int > 0

    - name: Set service_nodes_map_list fact to defaults
      ansible.builtin.set_fact:
        service_nodes_map_list: "{{ hostvars['kubeinit-defaults'].default_service_nodes_map_list }}"

    - name: Add entries from service_nodes_spec to service_nodes_map_list when defined
      ansible.builtin.set_fact:
        service_nodes_map_list: "{{ service_nodes_map_list + (service_nodes_spec | from_yaml) }}"
      when: service_nodes_spec is defined

    - name: Add entries from service_nodes_spec to service_nodes_map_list when defined
      ansible.builtin.set_fact:
        service_nodes_map_list: "{{ service_nodes_map_list + [{'name': 'service'}] }}"
      when: service_nodes_spec is not defined

    - name: Add service_nodes entries for the current distro only
      ansible.builtin.add_host:
        name: "{{ item['name'] }}"
        group: 'service_nodes'
        type: 'container'
        when_distro: "{{ item['when_distro'] | default(omit) }}"
      loop: "{{ service_nodes_map_list }}"
      when: (item['when_distro'] is not defined or distro in item['when_distro']) and item['name'] is defined

    - name: Set fact for the number of service nodes in this cluster
      ansible.builtin.set_fact:
        kubeinit_spec_service_count: "{{ groups['service_nodes'] | length | int }}"

- name: Add cluster network facts to cluster facts
  hosts: kubeinit-cluster
  become: false
  gather_facts: false
  tasks:
    - name: Assign service_nodes addresses
      ansible.builtin.set_fact:
        ansible_connection: 'ssh'
        ansible_host: "{{ last_available | ansible.utils.ipmath(0 - ansible_loop.index0) | ansible.utils.ipv4('address') }}"
        ansible_user: root
        type: 'container'
      loop: "{{ groups['service_nodes'] }}"
      loop_control:
        loop_var: service_node
        extended: true
      delegate_to: "{{ service_node }}"
      delegate_facts: true

- name: Add cluster network facts to cluster facts
  hosts: kubeinit-cluster
  become: false
  gather_facts: false
  tasks:
    - name: Update last available address for allocation
      ansible.builtin.set_fact:
        last_available: "{{ last_available | ansible.utils.ipmath(0 - (kubeinit_spec_service_count|int)) }}"

    - name: Set cluster dhcp facts
      ansible.builtin.set_fact:
        kubeinit_cluster_dhcp_start: "{{ next_available | ansible.utils.ipv4('address') }}"
        kubeinit_cluster_dhcp_end: "{{ last_available | ansible.utils.ipv4('address') }}"

    - name: Set cluster dhcp range size
      ansible.builtin.set_fact:
        kubeinit_cluster_dhcp_count: "{{ (kubeinit_cluster_dhcp_end | ansible.utils.ipv4('int') | int) - (kubeinit_cluster_dhcp_start | ansible.utils.ipv4('int') | int) + 1 }}"

    - name: Assert sufficient dhcp range
      ansible.builtin.assert:
        that:
          - kubeinit_cluster_dhcp_count|int > 0

    - name: Assign dhcp facts
      ansible.builtin.set_fact:
        dhcp_start: "{{ kubeinit_cluster_dhcp_start }}"
        dhcp_end: "{{ kubeinit_cluster_dhcp_end }}"

    - name: Set cluster_nodes_map_list fact to defaults
      ansible.builtin.set_fact:
        cluster_nodes_map_list: "{{ hostvars['kubeinit-defaults'].default_cluster_nodes_map_list }}"

    - name: Add entries from cluster_nodes_spec to cluster_nodes_map_list when defined
      ansible.builtin.set_fact:
        cluster_nodes_map_list: "{{ cluster_nodes_map_list + (cluster_nodes_spec | from_yaml) }}"
      when: cluster_nodes_spec is defined

    - name: Add all items in cluster_nodes_map_list to cluster_nodes_defaults for this distro
      ansible.builtin.set_fact:
        cluster_nodes_defaults: "{{ cluster_nodes_defaults | default([]) + (cluster_nodes | product([item])) }}"
      loop: "{{ cluster_nodes_map_list }}"
      when: item['when_distro'] is not defined or distro in item['when_distro']

- name: Add cluster network facts to cluster facts
  hosts: kubeinit-cluster
  become: false
  gather_facts: false
  tasks:
    - name: Apply defaults to all cluster nodes
      ansible.builtin.set_fact:
        os: "{{ _defaults['os'] if (_defaults['os'] is defined and _group_matches|bool and _type_matches|bool) else omit }}"
        vcpus: "{{ _defaults['vcpus'] if (_defaults['vcpus'] is defined and _group_matches|bool and _type_matches|bool) else omit }}"
        maxvcpus: "{{ _defaults['maxvcpus'] if (_defaults['maxvcpus'] is defined and _group_matches|bool and _type_matches|bool) else omit }}"
        disk: "{{ _defaults['disk'] if (_defaults['disk'] is defined and _group_matches|bool and _type_matches|bool) else omit }}"
        ram: "{{ _defaults['ram'] if (_defaults['ram'] is defined and _group_matches|bool and _type_matches|bool) else omit }}"
        target_order: "{{ _defaults['target_order'] if (_defaults['target_order'] is defined and _group_matches|bool and _type_matches|bool) else omit }}"
      loop: "{{ cluster_nodes_defaults }}"
      vars:
        _host: "{{ item[0] }}"
        _defaults: "{{ item[1] }}"
        _group_matches: "{{ item[1].when_group is not defined or item[1]['when_group'] in hostvars[item[0]].group_names }}"
        _type_matches: "{{ item[1]['when_type'] | default(hostvars[item[0]].type) | default('') == hostvars[item[0]].type | default('') }}"
      delegate_to: "{{ _host }}"
      delegate_facts: true
      when: _group_matches|bool and _type_matches|bool

- name: Add cluster network facts to cluster facts
  hosts: kubeinit-cluster
  become: false
  gather_facts: false
  tasks:
    - name: Clear cluster_nodes_defaults
      ansible.builtin.set_fact:
        cluster_nodes_defaults: null

    - name: Add extra_nodes_map_list to config for current distro only
      ansible.builtin.set_fact:
        extra_nodes_config: "{{ extra_nodes_config | default([]) + (groups['extra_nodes'] | default([]) | product([item])) }}"
      loop: "{{ extra_nodes_map_list }}"
      when: item['when_distro'] is not defined or distro in item['when_distro']

- name: Add cluster network facts to cluster facts
  hosts: kubeinit-cluster
  become: false
  gather_facts: false
  tasks:
    - name: Apply config to all extra nodes
      ansible.builtin.set_fact:
        _name: "{{ _config['name'] if (_config['name'] is defined) else omit }}"
        os: "{{ _config['os'] if (_config['os'] is defined and _type_matches|bool) else omit }}"
        vcpus: "{{ _config['vcpus'] if (_config['vcpus'] is defined and _type_matches|bool) else omit }}"
        maxvcpus: "{{ _config['maxvcpus'] if (_config['maxvcpus'] is defined and _type_matches|bool) else omit }}"
        disk: "{{ _config['disk'] if (_config['disk'] is defined and _type_matches|bool) else omit }}"
        ram: "{{ _config['ram'] if (_config['ram'] is defined and _type_matches|bool) else omit }}"
        target_order: "{{ _config['target_order'] if (_config['target_order'] is defined and _type_matches|bool) else omit }}"
      loop: "{{ extra_nodes_config }}"
      vars:
        _host: "{{ item[0] }}"
        _config: "{{ item[1] }}"
        _type_matches: "{{ item[1]['when_type'] | default(hostvars[item[0]].type) | default('') == hostvars[item[0]].type | default('') }}"
      delegate_to: "{{ _host }}"
      delegate_facts: true
      when: _config['name'] | default(_host) == _host and _type_matches|bool

- name: Add cluster network facts to cluster facts
  hosts: kubeinit-cluster
  become: false
  gather_facts: false
  tasks:
    - name: Add service_nodes_map_list to config for current distro only
      ansible.builtin.set_fact:
        service_nodes_config: "{{ service_nodes_config | default([]) + (groups['service_nodes'] | product([item])) }}"
      loop: "{{ service_nodes_map_list }}"
      when: item['when_distro'] is not defined or distro in item['when_distro']

- name: Add cluster network facts to cluster facts
  hosts: kubeinit-cluster
  become: false
  gather_facts: false
  tasks:
    - name: Apply config to all service nodes
      ansible.builtin.set_fact:
        _name: "{{ _config['name'] if (_config['name'] is defined) else omit }}"
        os: "{{ _config['os'] if (_config['os'] is defined) else omit }}"
        services: "{{ _config['services'] if (_config['services'] is defined) else omit }}"
        target_order: "{{ _config['target_order'] if (_config['target_order'] is defined) else omit }}"
      loop: "{{ service_nodes_config }}"
      vars:
        _host: "{{ item[0] }}"
        _config: "{{ item[1] }}"
      delegate_to: "{{ _host }}"
      delegate_facts: true
      when: _config['name'] | default(_host) == _host

- name: Add cluster network facts to cluster facts
  hosts: kubeinit-cluster
  become: false
  gather_facts: false
  tasks:
    - name: Determine the hypervisor target for all inventory nodes
      ansible.builtin.set_fact:
        node_targets: "{{ (node_targets | default([])) | union([inventory_node] | product(hostvars[inventory_node].target_order | reverse)) }}"
      loop: "{{ cluster_nodes + (groups['extra_nodes'] | default([])) + groups['service_nodes'] }}"
      loop_control:
        loop_var: inventory_node
    - debug: var=node_targets

- name: Add cluster network facts to cluster facts
  hosts: kubeinit-cluster
  become: false
  gather_facts: false
  tasks:
    - name: Assign the first requested hypervisor available for each node
      ansible.builtin.set_fact:
        target: "{{ hostvars[inventory_node].target | default(candidate) }}"
      loop: "{{ node_targets }}"
      vars:
        inventory_node: "{{ item[0] }}"
        candidate: "{{ item[1] }}"
      delegate_to: "{{ inventory_node }}"
      delegate_facts: true
      when: candidate in groups['hypervisor_hosts']

- name: Add cluster network facts to cluster facts
  hosts: kubeinit-cluster
  become: false
  gather_facts: false
  tasks:
    - name: Use cluster name as random number seed
      ansible.builtin.set_fact:
        _random_mac: "{{ '52:54:00' | community.general.random_mac(seed=cluster_name) }}"
        _random_uuid: "{{ 999999 | random(seed=cluster_name) | to_uuid }}"

- name: Assign remaining compute_nodes facts
  hosts: controller_nodes
  become: false
  gather_facts: false
  tasks:
    - name: Assign remaining controller_nodes facts
      ansible.builtin.set_fact:
        guest_name: "{{ hostvars['kubeinit-facts'].cluster_name }}-{{ inventory_hostname }}"
        fqdn: "{{ inventory_hostname }}.{{ hostvars['kubeinit-cluster'].cluster_fqdn }}"
        mac: "{{ hostvars[inventory_hostname].mac | default('52:54:00' | community.general.random_mac) }}"
        interfaceid: "{{ hostvars[inventory_hostname].interfaceid | default(999999 | random | to_uuid) }}"

- name: Assign remaining compute_nodes facts
  hosts: compute_nodes
  become: false
  gather_facts: false
  tasks:
    - name: Assign remaining compute_nodes facts
      ansible.builtin.set_fact:
        guest_name: "{{ hostvars['kubeinit-facts'].cluster_name }}-{{ inventory_hostname }}"
        fqdn: "{{ inventory_hostname }}.{{ hostvars['kubeinit-cluster'].cluster_fqdn }}"
        mac: "{{ hostvars[inventory_hostname].mac | default('52:54:00' | community.general.random_mac) }}"
        interfaceid: "{{ hostvars[inventory_hostname].interfaceid | default(999999 | random | to_uuid) }}"

- name: Assign remaining extra_nodes facts
  hosts: extra_nodes
  become: false
  gather_facts: false
  tasks:
    - name: Assign remaining extra_nodes facts
      ansible.builtin.set_fact:
        guest_name: "{{ hostvars['kubeinit-facts'].cluster_name }}-{{ inventory_hostname }}"
        fqdn: "{{ inventory_hostname }}.{{ hostvars['kubeinit-cluster'].cluster_fqdn }}"
        mac: "{{ hostvars[inventory_hostname].mac | default('52:54:00' | community.general.random_mac) }}"
        interfaceid: "{{ hostvars[inventory_hostname].interfaceid | default(999999 | random | to_uuid) }}"

- name: Assign remaining service_nodes facts
  hosts: service_nodes
  become: false
  gather_facts: false
  tasks:
    - name: Assign remaining service_nodes facts
      ansible.builtin.set_fact:
        guest_name: "{{ hostvars['kubeinit-facts'].cluster_name }}-{{ inventory_hostname }}"
        fqdn: "{{ inventory_hostname }}.{{ hostvars['kubeinit-cluster'].cluster_fqdn }}"
        type: container
        container_host: "{{ hostvars[inventory_hostname].target }}"
        mac: "{{ hostvars[inventory_hostname].mac | default('52:54:00' | community.general.random_mac) }}"
        interfaceid: "{{ hostvars[inventory_hostname].interfaceid | default(999999 | random | to_uuid) }}"

- name: Set additional kubeinit-env facts
  hosts: kubeinit-facts
  become: false
  gather_facts: false
  tasks:
    - name: Set additional kubeinit-env facts
      ansible.builtin.set_fact:
        kubeinit_dns_public: "{{ hostvars['kubeinit-env'].dns_public }}"
        kubeinit_registry_user: "{{ hostvars['kubeinit-env'].registry_username }}"
        kubeinit_registry_password: "{{ hostvars['kubeinit-env'].registry_password }}"

- name: Update progress and stop the deployment if required
  hosts: kubeinit-facts
  become: false
  gather_facts: false
  tasks:
    - name: Add task-gather-facts to tasks completed
      ansible.builtin.set_fact:
        tasks_completed: "{{ ['task-gather-facts'] }}"
      tags: omit_from_grapher

    - name: Stop the deployment if requested
      ansible.builtin.assert:
        msg: 'Stopping after task-gather-facts'
        that: (kubeinit_stop_after_task | default('')) not in hostvars['kubeinit-facts'].tasks_completed
      tags: omit_from_grapher
