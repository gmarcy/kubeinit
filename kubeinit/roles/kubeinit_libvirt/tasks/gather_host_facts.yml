---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

    - name: Confirm that we have ansible host connectivity
      ansible.builtin.ping:

    - name: Gather facts
      ansible.builtin.setup:
        filter:
        - 'ansible_all_ipv4_addresses'
        - 'ansible_architecture'
        - 'ansible_default_ipv4'
        - 'ansible_distribution'
        - 'ansible_distribution_major_version'
        - 'ansible_env'
        - 'ansible_os_family'
        - 'ansible_pkg_mgr'
        - 'ansible_ssh_host_key_ecdsa_public'
        - 'ansible_ssh_host_key_ecdsa_public_keytype'
        - 'ansible_user_dir'
        - 'ansible_user_id'
        - 'ansible_user_uid'
        gather_subset:
        - '!all'
        - 'network'

    - name: Clear redundant ansible_facts result
      ansible.builtin.set_fact:
        ansible_facts: {}

    - name: Set distribution_family for CentOS
      ansible.builtin.set_fact:
        distribution_family: "CentOS"
        host_os: "centos"
        libvirt_qemu_user: "qemu"
        package_manager: auto
      when: ansible_distribution == 'CentOS'

    - name: Set distribution_family for RedHat
      ansible.builtin.set_fact:
        distribution_family: "CentOS"
        host_os: "redhat"
        libvirt_qemu_user: "qemu"
        package_manager: auto
      when: ansible_distribution == 'RedHat'

    - name: Set distribution_family for Fedora
      ansible.builtin.set_fact:
        distribution_family: "Fedora"
        host_os: "fedora"
        libvirt_qemu_user: "qemu"
        package_manager: auto
      when: ansible_distribution == 'Fedora'

    - name: Set distribution_family for Debian
      ansible.builtin.set_fact:
        distribution_family: "Debian"
        host_os: "debian"
        libvirt_qemu_user: "libvirt-qemu"
        package_manager: apt
      when: ansible_distribution == 'Debian'

    - name: Set distribution_family for Ubuntu
      ansible.builtin.set_fact:
        distribution_family: "Debian"
        host_os: "ubuntu"
        libvirt_qemu_user: "libvirt-qemu"
        package_manager: apt
      when: ansible_distribution == 'Ubuntu'

    - name: Fails if OS is not supported
      ansible.builtin.assert:
        msg: "The host \"{{ inventory_hostname }}\" needs to be CentOS/RHEL, Fedora, or Debian/Ubuntu"
        that: hostvars[inventory_hostname]['distribution_family'] is defined

    - name: Gather the package facts
      ansible.builtin.package_facts:
        manager: "{{ hostvars[inventory_hostname].package_manager }}"
      no_log: "{{ not ((lookup('env', 'KUBEINIT_SHOW_PACKAGE_FACTS') | bool) or false) }}"

    - name: Set podman_is_installed
      ansible.builtin.set_fact:
        podman_is_installed: "{{ true if ('podman' in packages) else false }}"

    - name: Clear packages fact
      ansible.builtin.set_fact:
        packages: {}

    - name: Gather the services facts
      ansible.builtin.service_facts:
      no_log: "{{ not ((lookup('env', 'KUBEINIT_SHOW_SERVICE_FACTS') | bool) or false) }}"

    - name: Set _service_state to unknown
      ansible.builtin.set_fact:
        _service_state: 'unknown'

    - name: Set _service_state when firewalld is defined
      ansible.builtin.set_fact:
        _service_state: "{{ services['firewalld'].state }}"
      when: services['firewalld'] is defined

    - name: Set _service_state when firewalld.service is defined
      ansible.builtin.set_fact:
        _service_state: "{{ services['firewalld.service'].state }}"
      when: services['firewalld.service'] is defined

    - name: Set firewalld_is_active
      ansible.builtin.set_fact:
        firewalld_is_active: "{{ true if _service_state == 'running' else false }}"

    - name: Clear _service_state
      ansible.builtin.set_fact:
        _service_state: ''

    - name: Set _service_state when podman is defined
      ansible.builtin.set_fact:
        _service_state: "{{ services['podman'].state }}"
      when: services['podman'] is defined

    - name: Set _service_state when podman.service is defined
      ansible.builtin.set_fact:
        _service_state: "{{ services['podman.service'].state }}"
      when: services['podman.service'] is defined

    - name: Set podman_is_active
      ansible.builtin.set_fact:
        podman_is_active: "{{ true if _service_state == 'running' else false }}"

    - name: Set _service_state to unknown
      ansible.builtin.set_fact:
        _service_state: 'unknown'

    - name: Set _service_state when ovs-vswitchd is defined
      ansible.builtin.set_fact:
        _service_state: "{{ services['ovs-vswitchd'].state }}"
      when: services['ovs-vswitchd'] is defined

    - name: Set _service_state when ovs-vswitchd.service is defined
      ansible.builtin.set_fact:
        _service_state: "{{ services['ovs-vswitchd.service'].state }}"
      when: services['ovs-vswitchd.service'] is defined

    - name: Set ovs_is_active
      ansible.builtin.set_fact:
        ovs_is_active: "{{ true if _service_state == 'running' else false }}"

    - name: Clear services fact
      ansible.builtin.set_fact:
        services: {}

    - name: Set facts from setup to hostvars
      ansible.builtin.set_fact:
        ansible_default_ipv4_address: "{{ ansible_default_ipv4.address | default(omit) }}"
        ansible_host: "{{ ansible_host | default(inventory_hostname) }}"
        cpu_arch: "{{ 'amd64' if (ansible_architecture == 'x86_64') else ansible_architecture }}"
        os_family: "{{ 'mac' if (ansible_os_family == 'Darwin') else ('windows' if (ansible_os_family == 'Windows') else 'linux') }}"
        os: "{{ os | default(host_os) }}"
        user_path: "{{ ansible_env['PATH'] }}"
        runtime_path: "{{ omit if (ansible_env['XDG_RUNTIME_DIR'] is not defined) else ansible_env['XDG_RUNTIME_DIR'] }}"
        ssh_connection_address: "{{ omit if (ansible_env['SSH_CONNECTION'] is not defined) else ansible_env['SSH_CONNECTION'].split(' ')[2] }}"
        ssh_host_key_ecdsa: "{{ ansible_ssh_host_key_ecdsa_public_keytype }} {{ ansible_ssh_host_key_ecdsa_public }}"

    - name: Set pkg_mgr in ansible_facts for ansible.builtin.package tasks
      ansible.builtin.set_fact:
        ansible_facts:
          pkg_mgr: "{{ ansible_pkg_mgr }}"
