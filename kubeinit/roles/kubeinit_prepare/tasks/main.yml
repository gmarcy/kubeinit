---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Create tuples for each service and each service node providing that service
  ansible.builtin.set_fact:
    cluster_services: "{{ (cluster_services | default([])) + (item[0] | product([item[1]])) }}"
  loop: "{{ groups['service_nodes'] | map('extract', hostvars, 'services') | zip(groups['service_nodes']) }}"

- name: Combine those tuples into dict of services and nodes providing that service
  ansible.builtin.set_fact:
    cluster_services_dict: "{{ (cluster_services_dict | default({})) | combine({item[0]: cluster_services_dict[item[0]] | default([]) + [item[1]]}) }}"
  loop: "{{ cluster_services }}"

- name: Check for any services being provided on more than one service node
  ansible.builtin.assert:
    msg: "You are not currently permitted to run the same service on more than one service node."
    that: item.value | length == 1
  loop: "{{ cluster_services_dict | dict2items }}"

- name: Use first service node if there is no assigned provision service node
  ansible.builtin.set_fact:
    cluster_services_dict: "{{ cluster_services_dict | combine({'provision': [groups['service_nodes'][0]]}) }}"
  when: "'provision' not in cluster_services_dict"

- name: Flatten dictionary values into final form
  ansible.builtin.set_fact:
    all_cluster_services: "{{ (all_cluster_services | default({})) | combine({item.key: item.value[0]}) }}"
  loop: "{{ cluster_services_dict | dict2items }}"

- name: Set fact for cluster nameserver
  ansible.builtin.set_fact:
    kubeinit_cluster_nameserver: "{{ hostvars[all_cluster_services['bind']].ansible_host }}"
  when: "'bind' in all_cluster_services"

- name: Set all services cluster fact
  ansible.builtin.set_fact:
    services: "{{ all_cluster_services }}"

- name: Set all_nodes fact
  ansible.builtin.set_fact:
    all_nodes: "{{ _hostvars | map(attribute='inventory_hostname') }}"
  vars:
    _hostvars: "{{ (groups['service_nodes'] + cluster_nodes + (groups['extra_nodes'] | default([]))) | map('extract', hostvars) }}"

- name: Set all hypervisor authorized keys cluster fact
  ansible.builtin.set_fact:
    authorized_keys: "{{ _hostvars | map(attribute='authorized_key') }}"
  vars:
    _hostvars: "{{ (['localhost-facts'] + hostvars['kubeinit-facts'].all_hosts) | map('extract', hostvars) }}"

- name: Set all_guest_vms fact
  ansible.builtin.set_fact:
    all_guest_vms: "{{ _hostvars | selectattr('type', '==', 'virtual') | map(attribute='inventory_hostname') }}"
  vars:
    _hostvars: "{{ all_nodes | map('extract', hostvars) }}"

- name: Define group facts
  ansible.builtin.set_fact:
    kubeinit_first_controller_node: "{{ groups['controller_nodes'][0] }}"
    kubeinit_hypervisor_count: "{{ groups['hypervisor_hosts'] | length }}"
    kubeinit_controller_count: "{{ groups['controller_nodes'] | length }}"
    kubeinit_compute_count: "{{ groups['compute_nodes'] | default([]) | length }}"
    kubeinit_cluster_node_count: "{{ cluster_nodes | length }}"

- name: Install podman if required
  ansible.builtin.package:
    state: present
    name: "podman"
    use: "{{ hostvars['localhost-facts']['ansible_facts']['pkg_mgr'] }}"
  when: not hostvars['localhost-facts'].podman_is_installed

- name: Define service node facts
  ansible.builtin.set_fact:
    kubeinit_apache_service_name: "{{ cluster_name }}-apache"
    kubeinit_bind_service_name: "{{ cluster_name }}-bind"
    kubeinit_dnsmasq_service_name: "{{ cluster_name }}-dnsmasq"
    kubeinit_haproxy_service_name: "{{ cluster_name }}-haproxy"
    kubeinit_provision_service_name: "{{ cluster_name }}-provision"
    kubeinit_registry_service_name: "{{ cluster_name }}-registry"
    kubeinit_apache_service_node: "{{ hostvars['kubeinit-cluster'].services['apache'] | default(None) }}"
    kubeinit_bind_service_node: "{{ hostvars['kubeinit-cluster'].services['bind'] | default(None) }}"
    kubeinit_dnsmasq_service_node: "{{ hostvars['kubeinit-cluster'].services['dnsmasq'] | default(None) }}"
    kubeinit_haproxy_service_node: "{{ hostvars['kubeinit-cluster'].services['haproxy'] | default(None) }}"
    kubeinit_provision_service_node: "{{ hostvars['kubeinit-cluster'].services['provision'] }}"
    kubeinit_registry_service_node: "{{ hostvars['kubeinit-cluster'].services['registry'] | default(None) }}"

- name: Define additional host, node and services facts
  ansible.builtin.set_fact:
    kubeinit_bastion_host_address: "{{ hostvars[hostvars['kubeinit-facts'].kubeinit_bastion_host].ssh_connection_address }}"
    kubeinit_apache_service_address: "{{ hostvars[kubeinit_apache_service_node].ansible_host | default(None) }}"
    kubeinit_bind_service_address: "{{ hostvars[kubeinit_bind_service_node].ansible_host | default(None) }}"
    kubeinit_dnsmasq_service_address: "{{ hostvars[kubeinit_dnsmasq_service_node].ansible_host | default(None) }}"
    kubeinit_haproxy_service_address: "{{ hostvars[kubeinit_haproxy_service_node].ansible_host | default(None) }}"
    kubeinit_provision_service_address: "{{ hostvars[kubeinit_provision_service_node].ansible_host }}"
    kubeinit_registry_service_address: "{{ hostvars[kubeinit_registry_service_node].ansible_host | default(None) }}"
    kubeinit_service_user: "root"
    kubeinit_service_user_dir: "/root"
    kubeinit_ingress_hostname: "ingress"
    kubeinit_bind_volume_name: "{{ kubeinit_bind_service_name }}-config"
    kubeinit_registry_port: "5000"
    kubeinit_registry_fqdn: "{{ kubeinit_registry_service_node }}.{{ cluster_fqdn }}"
    kubeinit_registry_fqdn_alt: "registry.{{ cluster_fqdn }}"
    kubeinit_registry_uri: "{{ kubeinit_registry_service_node }}.{{ cluster_fqdn }}:5000"
    kubeinit_services_data_volume: "{{ cluster_name }}-data"
