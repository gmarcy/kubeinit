---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Delegate to kubeinit_setup_host_name
  block:

    - name: Install python3-pip package
      ansible.builtin.package:
        name: "{{ hostvars[kubeinit_setup_host_name].package_pip }}"
        state: present
        use: "{{ hostvars[kubeinit_setup_host_name].package_manager }}"
      become: true
      become_user: root
      register: _result
      failed_when: _result is not defined

    - name: Setup kubeinit repo for Debian distribution
      block:

        - name: Set cgroup_manager for debian release
          ansible.builtin.copy:
            content: |
              [engine]
              cgroup_manager = "cgroupfs"
            dest: '/etc/containers/containers.conf'
            mode: '0644'
          become: true
          become_user: root

        - name: Set version facts
          ansible.builtin.set_fact:
            _version: "{{ hostvars[kubeinit_setup_host_name].ansible_distribution_version.split('-')[0] }}"

        - name: Set version facts
          ansible.builtin.set_fact:
            _stability: "{{ 'stable' if (_version is version('11', 'le')) else 'testing' }}"

        - name: Set version facts
          ansible.builtin.set_fact:
            _path_element: "{{ _stability + '/' + hostvars[kubeinit_setup_host_name].ansible_distribution + '_' + _version }}"

      when: hostvars[kubeinit_setup_host_name].ansible_distribution == 'Debian'

    - name: Setup kubeinit repo for Ubuntu distribution
      block:

        - name: Set version facts
          ansible.builtin.set_fact:
            _version: "{{ hostvars[kubeinit_setup_host_name].ansible_distribution_version }}"
            _stability: "{{ 'stable' if (hostvars[kubeinit_setup_host_name].ansible_distribution_version is version('22.04', 'le')) else 'testing' }}"

        - name: Set version facts
          ansible.builtin.set_fact:
            # _path_element: "{{ _stability + '/x' + hostvars[kubeinit_setup_host_name].ansible_distribution + '_' + _version }}"
            _path_element: "{{ '/x' + hostvars[kubeinit_setup_host_name].ansible_distribution + '_' + _version }}"

      when: hostvars[kubeinit_setup_host_name].ansible_distribution == 'Ubuntu'

    - name: Setup kubeinit repo for Debian family
      block:

        - name: Make sure we have curl installed
          ansible.builtin.package:
            name: curl
            state: present
          become: true
          become_user: root

        - name: Add the Podman kubeinit package repository to Apt
          ansible.builtin.shell: |
            set -eo pipefail
            echo "deb https://download.opensuse.org/repositories/home:/kubeinit/{{ _path_element }}/ /" > /etc/apt/sources.list.d/kubeinit.list
            curl -L "https://download.opensuse.org/repositories/home:/kubeinit/{{ _path_element }}/Release.key" | apt-key add -
            apt-get update
          args:
            executable: /bin/bash
          become: true
          become_user: root
          delegate_to: "{{ kubeinit_setup_host_name }}"
          register: _result
          changed_when: "_result.rc == 0"

      when: hostvars[kubeinit_setup_host_name].distribution_family == 'Debian'

    - name: Install podman package
      ansible.builtin.package:
        name: podman
        state: present
        use: "{{ hostvars[kubeinit_setup_host_name].package_manager }}"
      become: true
      become_user: root
      register: _result
      failed_when: _result is not defined

    - name: Install jq package
      ansible.builtin.package:
        name: jq
        state: present
        use: "{{ hostvars[kubeinit_setup_host_name].package_manager }}"
      become: true
      become_user: root
      register: _result
      failed_when: _result is not defined

    - name: Get status of kubeinit folder
      ansible.builtin.stat:
        path: "{{ kubeinit_git_clone_path | default('~/kubeinit') }}"
      register: _result_stat_kubeinit

    - name: Remember that we will be cloning the kubeinit repo
      ansible.builtin.add_host:
        name: "{{ kubeinit_setup_host_name }}"
        git_clone_kubeinit: "{{ not _result_stat_kubeinit.stat.exists|bool }}"

    - name: Install git package when git clone is enabled
      ansible.builtin.package:
        name: git
        state: present
      become: true
      become_user: root
      register: _result
      when: hostvars[kubeinit_setup_host_name].git_clone_kubeinit|bool

  vars:
    kubeinit_setup_host_name: "{{ inventory_hostname }}"
  delegate_to: "{{ kubeinit_setup_host_name }}"
