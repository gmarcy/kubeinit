---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

#
# Gather kubeinit facts
#

- name: Add extra_nodes_map_list to config for current distro only
  ansible.builtin.set_fact:
    extra_nodes_config: "{{ extra_nodes_config | default([]) + (groups['extra_nodes'] | default([]) | product([item])) }}"
  loop: "{{ extra_nodes_map_list }}"
  when: item['when_distro'] is not defined or kubeinit_cluster_distro in item['when_distro']

- name: Apply config to all extra nodes
  ansible.builtin.add_host:
    name: "{{ _host }}"
    os: "{{ _config['os'] if (_config['os'] is defined and _type_matches|bool) else omit }}"
    vcpus: "{{ _config['vcpus'] if (_config['vcpus'] is defined and _type_matches|bool) else omit }}"
    maxvcpus: "{{ _config['maxvcpus'] if (_config['maxvcpus'] is defined and _type_matches|bool) else omit }}"
    disk: "{{ _config['disk'] if (_config['disk'] is defined and _type_matches|bool) else omit }}"
    ram: "{{ _config['ram'] if (_config['ram'] is defined and _type_matches|bool) else omit }}"
    target_order: "{{ _config['target_order'] if (_config['target_order'] is defined and _type_matches|bool) else omit }}"
  loop: "{{ extra_nodes_config }}"
  vars:
    _host: "{{ item[0] }}"
    _config: "{{ item[1] }}"
    _type_matches: "{{ item[1]['when_type'] | default(hostvars[item[0]].type) | default('') == hostvars[item[0]].type | default('') }}"
  when: _config['name'] | default(_host) == _host

- name: Add service_nodes_map_list to config for current distro only
  ansible.builtin.set_fact:
    service_nodes_config: "{{ service_nodes_config | default([]) + (groups['service_nodes'] | product([item])) }}"
  loop: "{{ service_nodes_map_list }}"
  when: item['when_distro'] is not defined or kubeinit_cluster_distro in item['when_distro']

- name: Apply config to all service nodes
  ansible.builtin.add_host:
    name: "{{ _host }}"
    os: "{{ _config['os'] if (_config['os'] is defined) else omit }}"
    services: "{{ _config['services'] if (_config['services'] is defined) else omit }}"
    target_order: "{{ _config['target_order'] if (_config['target_order'] is defined) else omit }}"
  loop: "{{ service_nodes_config }}"
  vars:
    _host: "{{ item[0] }}"
    _config: "{{ item[1] }}"
  when: _config['name'] | default(_host) == _host

- name: Define kubeinit_ssh_keytype
  ansible.builtin.set_fact:
    kubeinit_ssh_keytype: "{{ hostvars['kubeinit-env'].ssh_keytype }}"

- name: Use cluster name as random number seed
  ansible.builtin.set_fact:
    _random_mac: "{{ '52:54:00' | community.general.random_mac(seed=kubeinit_cluster_name) }}"
    _random_uuid: "{{ 999999 | random(seed=kubeinit_cluster_name) | to_uuid }}"

- name: Assign remaining controller_nodes facts
  ansible.builtin.add_host:
    name: "{{ controller_node }}"
    group: ['controller_nodes', 'cluster_nodes']
    mac: "{{ hostvars[controller_node].mac | default('52:54:00' | community.general.random_mac) }}"
    interfaceid: "{{ hostvars[controller_node].interfaceid | default(999999 | random | to_uuid) }}"
  loop: "{{ range(kubeinit_spec_controller_count|int) | list }}"
  loop_control:
    extended: true
  vars:
    controller_node: "{{ hostvars[kubeinit_cluster_name].controller_name_pattern | format(ansible_loop.index) }}"

- name: Assign remaining compute_nodes facts
  ansible.builtin.add_host:
    name: "{{ compute_node }}"
    group: ['compute_nodes', 'cluster_nodes']
    mac: "{{ hostvars[compute_node].mac | default('52:54:00' | community.general.random_mac) }}"
    interfaceid: "{{ hostvars[compute_node].interfaceid | default(999999 | random | to_uuid) }}"
  loop: "{{ range(kubeinit_spec_compute_count|int) | list }}"
  loop_control:
    extended: true
  vars:
    compute_node: "{{ hostvars[kubeinit_cluster_name].compute_name_pattern | format(ansible_loop.index) }}"

- name: Assign remaining extra_nodes facts
  ansible.builtin.add_host:
    name: "{{ hostvars[extra_node].inventory_hostname }}"
    group: 'extra_nodes'
    mac: "{{ hostvars[extra_node].mac | default('52:54:00' | community.general.random_mac) }}"
    interfaceid: "{{ hostvars[extra_node].interfaceid | default(999999 | random | to_uuid) }}"
  loop: "{{ groups['extra_nodes'] | default([]) }}"
  loop_control:
    loop_var: extra_node
    extended: true

- name: Assign remaining service_nodes facts
  ansible.builtin.add_host:
    name: "{{ hostvars[service_node].inventory_hostname }}"
    group: 'service_nodes'
    mac: "{{ hostvars[service_node].mac | default('52:54:00' | community.general.random_mac) }}"
    interfaceid: "{{ hostvars[service_node].interfaceid | default(999999 | random | to_uuid) }}"
  loop: "{{ groups['service_nodes'] | default([]) }}"
  loop_control:
    loop_var: service_node
    extended: true

- name: Set additional kubeinit-env facts
  ansible.builtin.set_fact:
    kubeinit_dns_public: "{{ hostvars['kubeinit-env'].dns_public }}"

- name: Set libvirt release facts
  ansible.builtin.set_fact:
    kubeinit_libvirt_debian_release: "11"
    # It is possible to configure different versions of the OS depending on the distribution
    # kubeinit_libvirt_ubuntu_release: "{{ 'noble' if (kubeinit_cluster_distro == 'cdk') else 'jammy' }}"
    kubeinit_libvirt_ubuntu_release: "jammy"

- name: Set registry authentication facts
  ansible.builtin.set_fact:
    kubeinit_registry_user: registryusername
    kubeinit_registry_password: registrypassword

- name: Set registry authentication facts
  ansible.builtin.set_fact:
    registry_user: registryusername
    registry_password: registrypassword
  delegate_to: 'kubeinit-facts'
  delegate_facts: true

- name: Determine the hypervisor target for all inventory nodes
  ansible.builtin.set_fact:
    node_targets: "{{ (node_targets | default([])) | union([inventory_node] | product(hostvars[inventory_node].target_order | reverse)) }}"
  loop: "{{ groups['cluster_nodes'] + (groups['extra_nodes'] | default([])) + groups['service_nodes'] }}"
  loop_control:
    loop_var: inventory_node

- name: Assign the first requested hypervisor available for each node
  ansible.builtin.add_host:
    name: "{{ inventory_node }}"
    target: "{{ hostvars[inventory_node].target | default(candidate) }}"
  loop: "{{ node_targets }}"
  vars:
    inventory_node: "{{ item[0] }}"
    candidate: "{{ item[1] }}"
  when: candidate in groups['kubeinit_hypervisors']
