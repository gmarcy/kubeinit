---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Assign controller_nodes addresses
  ansible.builtin.add_host:
    name: "{{ controller_node }}"
    group: ['controller_nodes', 'cluster_nodes']
    ansible_connection: 'ssh'
    ansible_host: "{{ kubeinit_cluster_next_available | ansible.utils.ipmath(ansible_loop.index0) | ansible.utils.ipv4('address') }}"
    type: 'virtual'
  loop: "{{ range(kubeinit_spec_controller_count|int) | list }}"
  loop_control:
    extended: true
  vars:
    controller_node: "{{ hostvars[kubeinit_cluster_name].controller_name_pattern | format(ansible_loop.index) }}"

- name: Update next available address for allocation
  ansible.builtin.set_fact:
    kubeinit_cluster_next_available: "{{ kubeinit_cluster_next_available | ansible.utils.ipmath(kubeinit_spec_controller_count|int) }}"

- name: Assign compute_nodes addresses
  ansible.builtin.add_host:
    name: "{{ compute_node }}"
    group: ['compute_nodes', 'cluster_nodes']
    ansible_connection: 'ssh'
    ansible_host: "{{ kubeinit_cluster_next_available | ansible.utils.ipmath(ansible_loop.index0) | ansible.utils.ipv4('address') }}"
    type: 'virtual'
  loop: "{{ range(kubeinit_spec_compute_count|int) | list }}"
  loop_control:
    extended: true
  vars:
    compute_node: "{{ hostvars[kubeinit_cluster_name].compute_name_pattern | format(ansible_loop.index) }}"

- name: Update next available address for allocation
  ansible.builtin.set_fact:
    kubeinit_cluster_next_available: "{{ kubeinit_cluster_next_available | ansible.utils.ipmath(kubeinit_spec_compute_count|int) }}"

- name: Set extra_nodes_map_list fact to defaults
  ansible.builtin.set_fact:
    extra_nodes_map_list: "{{ hostvars['kubeinit-defaults'].default_extra_nodes_map_list }}"

- name: Add entries from extra_nodes_spec to extra_nodes_map_list when defined
  ansible.builtin.set_fact:
    extra_nodes_map_list: "{{ extra_nodes_map_list + (extra_nodes_spec | from_yaml) }}"
  when: extra_nodes_spec is defined

- name: Add extra_nodes entries for the current distro only
  ansible.builtin.add_host:
    name: "{{ item['name'] }}"
    group: 'extra_nodes'
    when_distro: "{{ item['when_distro'] | default(omit) }}"
  loop: "{{ extra_nodes_map_list }}"
  when: (item['when_distro'] is not defined or kubeinit_cluster_distro in item['when_distro']) and item['name'] is defined

- name: Set fact for the number of extra nodes in this cluster
  ansible.builtin.set_fact:
    kubeinit_spec_extra_count: "{{ groups['extra_nodes'] | default([]) | length | int }}"

- name: Assign extra_nodes addresses
  ansible.builtin.add_host:
    name: "{{ extra_node }}"
    group: 'extra_nodes'
    ansible_connection: 'ssh'
    ansible_host: "{{ kubeinit_cluster_next_available | ansible.utils.ipmath(ansible_loop.index0) | ansible.utils.ipv4('address') }}"
    type: 'virtual'
  loop: "{{ groups['extra_nodes'] | default([]) }}"
  loop_control:
    loop_var: extra_node
    extended: true

- name: Update next available address for allocation
  ansible.builtin.set_fact:
    kubeinit_cluster_next_available: "{{ kubeinit_cluster_next_available | ansible.utils.ipmath(kubeinit_spec_extra_count|int) }}"
  when: kubeinit_spec_extra_count|int > 0

- name: Set service_nodes_map_list fact to defaults
  ansible.builtin.set_fact:
    service_nodes_map_list: "{{ hostvars['kubeinit-defaults'].default_service_nodes_map_list }}"

- name: Add entries from service_nodes_spec to service_nodes_map_list when defined
  ansible.builtin.set_fact:
    service_nodes_map_list: "{{ service_nodes_map_list + (service_nodes_spec | from_yaml) }}"
  when: service_nodes_spec is defined

- name: Add service_nodes entries for the current distro only
  ansible.builtin.add_host:
    name: "{{ item['name'] }}"
    group: 'service_nodes'
    when_distro: "{{ item['when_distro'] | default(omit) }}"
  loop: "{{ service_nodes_map_list }}"
  when: (item['when_distro'] is not defined or kubeinit_cluster_distro in item['when_distro']) and item['name'] is defined

- name: Set fact for the number of service nodes in this cluster
  ansible.builtin.set_fact:
    kubeinit_spec_service_count: "{{ groups['service_nodes'] | length | int }}"

- name: Assign service_nodes addresses
  ansible.builtin.add_host:
    name: "{{ service_node }}"
    group: 'service_nodes'
    ansible_connection: 'ssh'
    ansible_host: "{{ kubeinit_cluster_last_available | ansible.utils.ipmath(0 - ansible_loop.index0) | ansible.utils.ipv4('address') }}"
    type: 'container'
  loop: "{{ groups['service_nodes'] }}"
  loop_control:
    loop_var: service_node
    extended: true

- name: Update last available address for allocation
  ansible.builtin.set_fact:
    kubeinit_cluster_last_available: "{{ kubeinit_cluster_last_available | ansible.utils.ipmath(0 - (kubeinit_spec_service_count|int)) }}"
