---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Update hosts and stop if required
  block:
    - name: Gather kubeinit ci facts if needed
      ansible.builtin.include_tasks: gather_ci_facts.yml
      vars:
        facts_prepared: "{{ 'kubeinit_facts' in groups }}"
      when: not facts_prepared

    - name: Stop the deployment if required
      block:
        - name: "Stop before 'task-prepare-environment' when requested"
          ansible.builtin.add_host:
            name: "kubeinit-facts"
            playbook_terminated: true
        - name: End play
          ansible.builtin.meta: end_play
      when: kubeinit_stop_before_task is defined and kubeinit_stop_before_task == 'task-prepare-environment'
  tags: omit_from_grapher

- name: Define kubeinit_facts_hostvars
  ansible.builtin.set_fact:
    kubeinit_facts_hostvars: "{{ hostvars['kubeinit-facts'] }}"

- name: Define additional CI host facts
  ansible.builtin.set_fact:
    kubeinit_ci_host_address: "{{ hostvars[kubeinit_ci_host_name].ssh_connection_address }}"
    kubeinit_ci_host_user: "{{ kubeinit_facts_hostvars.remote_user }}"
    kubeinit_ci_bridge_name: kubeinit-ci-bridge
    kubeinit_ci_pod_name: kubeinit-ci-pod

- name: Delegate to kubeinit_ci_host_name
  block:

    - name: Gather current firewall rules
      ansible.builtin.command: firewall-cmd --list-all
      register: _result_firewall_info
      changed_when: "_result_firewall_info.rc == 0"
      become: true
      become_user: root

    - name: Select ports line
      ansible.builtin.set_fact:
        _result_firewall_ports: "{{ _port_list.split(' ') }}"
      loop: "{{ _result_firewall_info.stdout_lines | default([]) }}"
      vars:
        _port_list: "{{ ([item] | map('regex_replace', '^ *ports: *(.*)$', '\\1'))[0] }}"
      when: "(item | trim) is match('^ports: ')"

    - name: Check firewalld ports for existing entries
      ansible.builtin.add_host:
        name: "{{ kubeinit_ci_host_name }}"
        add_publish_port: "{{ false if ('8080/tcp' in _firewall_ports) else true }}"
        reload_firewalld: "{{ false if ('8080/tcp' in _firewall_ports) else true }}"
      vars:
        _firewall_ports: "{{ _result_firewall_ports | default([]) }}"
      become: true
      become_user: root

    - name: Open firewall port 8080 on bastion
      ansible.builtin.command: firewall-cmd --add-port 8080/tcp --permanent
      register: _result
      changed_when: "_result.rc == 0"
      become: true
      become_user: root
      when: hostvars[kubeinit_ci_host_name].add_publish_port | default(false)

    - name: Reload firewalld service
      ansible.builtin.command: firewall-cmd --reload
      register: _result
      changed_when: "_result.rc == 0"
      become: true
      become_user: root
      when: hostvars[kubeinit_ci_host_name].reload_firewalld | default(false)

  delegate_to: "{{ kubeinit_ci_host_name }}"
  when: hostvars[kubeinit_ci_host_name].firewalld_is_active

- name: Delegate to kubeinit_ci_host_name
  block:

    - name: Setup kubic repo for Debian distribution
      block:

        - name: Set cgroup_manager for debian release
          ansible.builtin.copy:
            content: |
              [engine]
              cgroup_manager = "cgroupfs"
            dest: '/etc/containers/containers.conf'
            mode: '0644'
          become: true
          become_user: root

        - name: Set version facts
          ansible.builtin.set_fact:
            _version: "{{ hostvars[kubeinit_ci_host_name].ansible_distribution_version.split('-')[0] }}"

        - name: Set version facts
          ansible.builtin.set_fact:
            _stability: "{{ 'stable' if (_version is version('11', 'le')) else 'testing' }}"

        - name: Set version facts
          ansible.builtin.set_fact:
            _path_element: "{{ _stability + '/' + hostvars[kubeinit_ci_host_name].ansible_distribution + '_' + _version }}"

      when: hostvars[kubeinit_ci_host_name].ansible_distribution == 'Debian'

    - name: Setup kubic repo for Ubuntu distribution
      block:

        - name: Set version facts
          ansible.builtin.set_fact:
            _version: "{{ hostvars[kubeinit_ci_host_name].ansible_distribution_version }}"
            _stability: "{{ 'stable' if (hostvars[kubeinit_ci_host_name].ansible_distribution_version is version('21.04', 'le')) else 'testing' }}"

        - name: Set version facts
          ansible.builtin.set_fact:
            _path_element: "{{ _stability + '/x' + hostvars[kubeinit_ci_host_name].ansible_distribution + '_' + _version }}"

      when: hostvars[kubeinit_ci_host_name].ansible_distribution == 'Ubuntu'

    - name: Setup kubic repo for Debian family
      block:

        - name: Make sure we have curl installed
          ansible.builtin.package:
            name: curl
            state: present
          become: true
          become_user: root

        - name: Add the Podman kubic package repository to Apt
          ansible.builtin.shell: |
            set -eo pipefail
            echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/{{ _path_element }}/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:{{ _stability }}.list
            curl -L "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/{{ _path_element }}/Release.key" | apt-key add -
            apt-get update
          args:
            executable: /bin/bash
          become: true
          become_user: root
          delegate_to: "{{ kubeinit_ci_host_name }}"
          register: _result
          changed_when: "_result.rc == 0"

      when: hostvars[kubeinit_ci_host_name].distribution_family == 'Debian'

    - name: Prepare podman on ci host
      ansible.builtin.include_role:
        name: kubeinit.kubeinit.kubeinit_prepare
        tasks_from: prepare_podman.yml
        public: true
      vars:
        _param_install_dependencies: true
        _param_hostvars: "{{ hostvars[kubeinit_ci_host_name] }}"

  delegate_to: "{{ kubeinit_ci_host_name }}"

- name: Update hosts and stop if required
  block:
    - name: Add task-prepare-environment to tasks_completed
      ansible.builtin.add_host:
        name: "kubeinit-facts"
        tasks_completed: "{{ kubeinit_facts_hostvars.tasks_completed | union(['task-prepare-environment']) }}"

    - name: Update kubeinit_facts_hostvars
      ansible.builtin.set_fact:
        kubeinit_facts_hostvars: "{{ hostvars['kubeinit-facts'] }}"

    - name: Stop the deployment if required
      block:
        - name: Stop after 'task-prepare-environment' when requested
          ansible.builtin.add_host:
            name: "kubeinit-facts"
            playbook_terminated: true
        - name: End play
          ansible.builtin.meta: end_play
      when: kubeinit_stop_after_task is defined and kubeinit_stop_after_task in kubeinit_facts_hostvars.tasks_completed
  tags: omit_from_grapher
